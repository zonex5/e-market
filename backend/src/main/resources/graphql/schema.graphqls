type Language {
    code: String!
    name: String
    isDefault: Boolean
}

type Country {
    id: Int!,
    name: String!,
    code: String!,
    phone: String!
}

type Category {
    id: ID
    title: String
    annotation: String
    active: Boolean
    pictureId: Int  #id from Images table
    products: [Product]
}

type Product {
    id: ID
    sku: String
    title: String
    annotation: String
    description: String

    thumbnail: Int  #id from Images table
    images: [Int]   #ids from Images table
    category: Category

    available: Boolean #in stock
    stock: Int  #todo extract to variants (one default variant)
    price: Price
    active: Boolean
    inWishList: Boolean

    variants: [ProductVariant]
    attributes: [ProductGeneralAttribute]
}

type CartProduct {
    id: ID
    title: String
    available: Boolean
    active: Boolean
    quantity: Int
    oldPrice: Float
    currentPrice: Float
    sale: Boolean
    thumbnail: Int
    details: String
    discount: Int
}

type CustomerCart {
    products: [CartProduct]
    totalAmount: Float
    savedAmount: Float
}

type ProductGeneralAttribute {
    id: Int
    name: String
    values: [String]
}

type ProductVariant {
    productId: Int
    attributes: [Attribute]
    price: Price
    inStock: Boolean
    sku: String
}

type Attribute {
    id: Int
    name: String
    value: String
}

type Price {
    oldPrice: Float,
    newPrice: Float,
    currentPrice: Float,
    discount: Int,
    fromDate: String,
    sale: Boolean
}

type CustomerSavedData {
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    countryId: Int
    address: String,
    zip: String,
    city: String,
    save: Boolean
}

type OrderAmountsData {
    subtotal: Float,
    shipping: Float,
    total: Float
}

type ShippingMethodModel{
    methodName: String
    cost: Float
}

type NewOrderData {
    customerData: CustomerSavedData,
    amounts: OrderAmountsData,
    shippingMethod: ShippingMethodModel
}

type OrderResult {
    success: Boolean!,
    unavailableProducts: [Int]
}

type OrderDataItem {
    productId: Int,
    productName: String,
    price: Float,
    quantity: Int,
    details: String,
    thumbnail: Int
}

type OrderData {
    id: Int,
    status: String,
    orderDate: String,
    items: [OrderDataItem]
}

input OrderDataInput {
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    country: Int
    address: String,
    zip: String,
    city: String,
    save: Boolean
}

input CategoryInput {
    id: ID
    title: String
    annotation: String
    active: Boolean
}

input ProductInput {
    id: ID
    title: String
    annotation: String
    description: String
    active: Boolean
    categoryId: Int
}

input PriceInput {
    productId: Int,
    originalPrice: Float,
    discount: Int,
    fromDate: String
}

input SortInput {
    field: String,
    direction: String,
    page: Int,
    size: Int
}

input CustomerDataInput {
    email: String,
    firstName: String,
    lastName: String
}

type Query {
    getAllCategories: [Category]
    getActiveCategories: [Category]
    getProductById(id: Int!): Product
    getCustomerCart: CustomerCart
    getOrderData(status: String): [OrderData]
    productsByCategory(id: Int!, sort: SortInput): [Product]
    totalProductsByCategory(id: Int!): Int
    productsByText(text: String!, sort: SortInput): [Product]
    totalProductsByText(text: String!): Int
    productsMainPage(sort: SortInput): [Product]
    productsRandom(sort: SortInput): [Product]
    favourites: [Product]
    languages: [Language]
    countries: [Country]
    newOrderData: NewOrderData
}

type Mutation {
    addProduct(productInput: ProductInput): Product
    updateProduct(productInput: ProductInput): Product
    deleteProduct(productId: Int): Boolean

    addCurrentPrice(priceInput: PriceInput): Price
    deletePrice(priceId: Int): Boolean

    addProductToCart(id: Int!, quantity: Int!): Boolean
    deleteProductFromCart(id: Int!): Boolean
    updateQuantityInCart(id: Int!, quantity: Int!) : Boolean

    productToWishList(id: Int!, flag: Boolean!): Boolean  # flag=true for add, flag=false for remove
    finishOrder(data: OrderDataInput): OrderResult

    saveCustomerData(data: CustomerDataInput): Boolean
}